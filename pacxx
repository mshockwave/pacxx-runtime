#!/bin/bash

ARGS=( )
HARGS=( )
FILES=( )
ignore=false
PACXXRT_PATH=$HOME/pacxx_v2/build_rt
TECH=0
CUDA_MODE=0
FMA=0
KEEP=0
TMPDIR=.
FILES_TO_REMOVE=( )
PACXX_FLAGS="-fcolor-diagnostics -Wno-ignored-attributes"
PACXX_HOST_FLAGS="-std=c++14 -O3 -g -fPIC -rdynamic -L"$PACXXRT_PATH
PACXX_DEV_FLAGS="-std=pacxx -O0 -S -emit-llvm -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -DNDEBUG"

PACXX_LD_FLAGS="-L$PACXX_PATH/lib -L$CUDA_PATH/lib64"
PACXX_RT=""
PACXX_RT_FLAG=""
PACXX_DC_FILES=" "
PACXX_RT_LIBS=" -lpacxxrt2 -lcuda -lcudart -lOpenCL"
PACXX_INCLUDES="-isystem $PACXX_PATH/include -isystem $CUDA_PATH/include "

CUDA_RT_FLAG="-D__CUDA_RT"

PACXX=$PACXX_PATH/bin

$PACXX/clang --version

function clean_up
{
  if [ $KEEP -eq 0 ]; then 
    rm -rf $WORKING_DIR
    for FILE in $FILES_TO_REMOVE
    do
      rm $FILE
    done
  fi
}


for ARG in $*
do
    if [[ "$ARG" == "-"* ]]; then
      if [ "$ARG" == "-o" ]; then
          ignore=true
      elif [ "$ARG" == "-nvvm" ]; then
  	  TECH=1
      elif [ "$ARG" == "-c" ]; then
          :
      elif [ "$ARG" == "-g" ]; then
          : 
      elif [ "$ARG" == "-keep" ]; then
          KEEP=1 
      elif [ "$ARG" == "-cuda" ]; then
          TECH=1
          CUDA_MODE=1
      elif [ $ignore = false ]; then
          ARGS+=$ARG
          ARGS+=" "
      else
          ignore=false
      fi
    else
      if [ $ignore = false ]; then
         if [[ "$ARG" == *".c"* ]]; then
           FILES+=$ARG
           FILES+=" "
         else 
           ARGS+=$ARG
           ARGS+=" "
         fi
      else
        ignore=false;
      fi
    fi
done

if [ $TECH -eq 1 ]; then
PACXX_RT=$CUDA_RT_FLAG
PACXX_RT_FLAG="-D__CUDA_DEVICE_CODE"
#PACXX_DEV_FLAGS=$PACXX_DEV_FLAGS" -D__CUDACC__ -D__CUDA_ARCH__=350"
else
PACXX_RT="-D__OPENCL_RT"
PACXX_RT_FLAG="-D__OPENCL_DEVICE_CODE"
fi

#if [ $CUDA_MODE -eq 1 ]; then 
#  PACXX_FLAGS=$PACXX_FLAGS" -include __cuda_mode.h"
#fi

# Create temp-dir
DATE=`date +%y%m%d-%H%M`
WORKING_DIR=`mktemp -d $TMPDIR/tmp-$DATE-XXXXXX`

USER_FILES=( )

if [ $CUDA_MODE -eq 1 ]; then
  for FILE in $FILES 
  do
    if [[ $FILE == *".cu" ]]; then 
 
      cp $FILE $FILE.cpp
      sed -i '1 i\#include <__cuda_mode.h>\n#include<kernel.h>' $FILE.cpp
      $PACXX/CUDARewriter $FILE.cpp -- -std=pacxx_cuda $PACXX_INCLUDES $CUDA_INCLUDES $ARGS -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS $CUDA_RT_FLAG $PACXX_RT_FLAG   
     if [ $? -ne 0 ]; then
        echo "STS transformation failed!"
        clean_up
        exit 1
     fi
     USER_FILES+=$FILE.cpp
      FILES_TO_REMOVE+=$FILE.cpp
      FILES_TO_REMOVE+=" "
    else
      USER_FILES+=$FILE
    fi
    USER_FILES+=" "
  done
else 
  USER_FILES=$FILES
fi


#mv nvvm.ll nvvm.bac 2>/dev/null
rm *.ll 2>/dev/null

$PACXX/clang++ \
    $PACXX_FLAGS \
    $PACXX_DEV_FLAGS \
    $PACXX_INCLUDES \
    $CUDA_INCLUDES \
    $ARGS \
    $USER_FILES \
    $PACXX_DC_FILES \
    -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS \
    $CUDA_RT_FLAG \
    $PACXX_RT_FLAG

if [ $? -ne 0 ]; then
    echo "Failed to compile device code!"
    clean_up
    exit 1
fi
cp $PACXXRT_PATH/*.bc $WORKING_DIR/
mv *.ll $WORKING_DIR/

$PACXX/llvm-link -suppress-warnings -S $WORKING_DIR/*.ll -o $WORKING_DIR/pacxx.ll

if [ $? -ne 0 ]; then
    echo "Failed to link LLVM IR"
    clean_up
    exit 2
fi

cp $WORKING_DIR/pacxx.ll opt0.ll
if [ $TECH -ne 0 ]; then 

$PACXX/llvm-link $WORKING_DIR/nvvm_device_binding.bc  $WORKING_DIR/pacxx.ll -S -o $WORKING_DIR/kernel.ll
$PACXX/opt -scalarizer -mem2reg -targetlibinfo -tbaa -basicaa -loop-rotate -simplifycfg -basiccg -functionattrs -sroa -domtree -early-cse -lazy-value-info -correlated-propagation -reassociate -domtree -loops -lcssa -loop-rotate -slsr -licm -loop-unswitch -loop-idiom -loop-deletion -loop-unroll -instsimplify -domtree -loops -lcssa -memdep -gvn -break-crit-edges -constmerge -pacxx_reflection -pacxx_inline -pacxx_dce -scalarizer -mem2reg -instcombine -simplifycfg -instcombine -spir -pacxx_classify -nvvm -die $WORKING_DIR/kernel.ll -S -o kernel.ll

$PACXX/llvm-link -suppress-warnings kernel.ll $NVVM_PATH/libdevice.compute_35.10.bc -S -o kernel.ll

$PACXX/opt -nvvm_reg -pacxx_inline -pacxx_dce kernel.ll -S -o kernel.ll

fi


$PACXX/opt $WORKING_DIR/pacxx.ll -o $WORKING_DIR/pacxx.bc \
        -pacxx_dce \
        -targetlibinfo \
        -tbaa \
        -basicaa \
        -globalopt \
        -ipsccp \
        -instcombine \
        -loop-rotate \
        -simplifycfg \
        -basiccg \
        -prune-eh \
        -inline \
        -functionattrs \
        -sroa \
        -domtree \
        -early-cse \
        -lazy-value-info \
        -jump-threading \
        -correlated-propagation \
        -simplifycfg \
        -instcombine \
        -tailcallelim \
        -simplifycfg \
        -reassociate \
        -domtree \
        -loops \
        -lcssa \
        -loop-rotate \
        -licm \
        -loop-unswitch \
        -instcombine \
        -scalar-evolution \
        -lcssa \
        -indvars \
        -loop-idiom \
        -loop-deletion \
        -loop-unroll \
        -memdep \
        -gvn \
        -memdep \
        -memcpyopt \
        -sccp \
        -instcombine \
        -lazy-value-info \
        -jump-threading \
        -correlated-propagation \
        -domtree \
        -memdep \
        -dse \
        -loops \
        -scalar-evolution \
        -slp-vectorizer \
        -adce \
        -simplifycfg \
        -instcombine \
        -barrier \
        -domtree \
        -loops \
        -lcssa \
        -branch-prob \
        -block-freq \
        -scalar-evolution \
        -loop-vectorize \
        -break-crit-edges \
        -instcombine \
        -simplifycfg \
        -globaldce \
        -constmerge \
        -verify 

$PACXX/llvm-dis $WORKING_DIR/pacxx.bc -o opt1.ll

$PACXX/opt -mem2reg -pacxx_reflection $WORKING_DIR/pacxx.bc -o $WORKING_DIR/pacxx.bc

$PACXX/llvm-dis $WORKING_DIR/pacxx.bc -o opt2.ll

$PACXX/opt -pacxx_inline -spir -pacxx_dce $WORKING_DIR/pacxx.bc -o $WORKING_DIR/spir.bc  

if [ $? -ne 0 ]; then
	 echo "Failed to generate SPIR!"
    exit 3
fi

$PACXX/opt -inline -instcombine -pacxx_reflection_cleaner -simplifycfg -dce -instcombine -pacxx_dce $WORKING_DIR/spir.bc -S -o reflect.ll
if [ $? -ne 0 ]; then
	 echo "Failed to generate Reflection IR!"
    exit 3
fi



if [ $TECH -ne 1 ]; then

$PACXX/opt -pacxx_classify $WORKING_DIR/spir.bc -o $WORKING_DIR/spir.bc

fi

if [ $? -ne 0 ]; then
	 echo "Failed to generate SPIR!"
    exit 3
fi


$PACXX/llvm-dis $WORKING_DIR/spir.bc -o spir.ll

if [ $TECH -ne 0 ]; then
	$PACXX/llvm-link -suppress-warnings $WORKING_DIR/spir.bc $WORKING_DIR/nvvm_device_binding.bc -o $WORKING_DIR/cira.bc
        $PACXX/opt -inline $WORKING_DIR/cira.bc -o $WORKING_DIR/cira.bc
	$PACXX/opt -nvvm $WORKING_DIR/cira.bc -o $WORKING_DIR/nvvm.bc  
	#if [ $? -ne 0 ]; then
	#	exit 4
	#fi
	#$PACXX/llvm-dis $WORKING_DIR/nvvm.bc -o nvvm.ll
fi

if [ $? -ne 0 ]; then
   echo "Device Code generation failed"
   clean_up
   exit 5
fi

#for ARG in $*
#do
#    if [ "$ARG" == "-nvvm" ]; then
#	TECH=1
#    elif [ "$ARG" == "-cuda" ]; then
#       TECH=1
#    elif [ "$ARG" == "-keep" ]; then
#        KEEP=1
#    else 
#        HARGS+=$ARG
#        HARGS+=" "
#    fi
#done

ARGS=( )

for ARG in $*
do
    if [[ "$ARG" == "-"* ]]; then
      if [ "$ARG" == "-nvvm" ]; then
  	  TECH=1
      elif [ "$ARG" == "-c" ]; then
          : 
      elif [ "$ARG" == "-keep" ]; then
          KEEP=1 
      elif [ "$ARG" == "-cuda" ]; then
          TECH=1
          CUDA_MODE=1
      elif [ $ignore = false ]; then
          ARGS+=$ARG
          ARGS+=" "
      else
          ignore=false
      fi
    else
      if [[ "$ARG" == *".c"* ]]; then
      FILES+=$ARG
      FILES+=" "
    else 
      ARGS+=$ARG
      ARGS+=" "
    fi
    fi
done

cp $PACXXRT_PATH/*.S $WORKING_DIR

if [ $TECH -ne 0 ]; then
$PACXX/llvm-link -suppress-warnings $WORKING_DIR/nvvm.bc $NVVM_PATH/libdevice.compute_35.10.bc -o $WORKING_DIR/nvvm.bc
#$PACXX/opt -inline -constprop -simplifycfg -instcombine $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc
$PACXX/opt -inline $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc
$PACXX/opt -nvvm $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc

#$PACXX/opt -inline -instcombine -constprop -simplifycfg -instcombine $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc
$PACXX/opt -nvvm $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc

$PACXX/opt -instcombine -pacxx_classify $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc

$PACXX/opt -nvvm_reg -pacxx_static -mem2reg -simplifycfg -pacxx_dce  $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc
$PACXX/opt -pacxx_verifier $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc

$PACXX/llvm-link -suppress-warnings $PACXXRT_PATH/syscalls.bc $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc


if [ $? -ne 0 ]; then
   echo "Module verification failed"
   #clean_up
   exit 6
fi
#$PACXX/opt -O3 $WORKING_DIR/nvvm.bc -o $WORKING_DIR/nvvm.bc
$PACXX/llvm-dis $WORKING_DIR/nvvm.bc -o nvvm.ll
#mv nvvm.bac nvvm.ll
#$PACXX/clang++ -DFILE='"'$WORKING_DIR'/nvvm.bc"' $WORKING_DIR/embed_llvm.S -c -o $WORKING_DIR/ir.o
$PACXX/clang++ -DFILE='"kernel.ll"' $WORKING_DIR/embed_llvm.S -c -o $WORKING_DIR/ir.o
else

#$PACXX/clang++ -DFILE='"'$WORKING_DIR'/spir.bc"' $WORKING_DIR/embed_llvm.S -c -o $WORKING_DIR/ir.o
$PACXX/clang++ -DFILE='"spir.ll"' $WORKING_DIR/embed_llvm.S -c -o $WORKING_DIR/ir.o
fi

$PACXX/clang++ -DFILE='"reflect.ll"' $WORKING_DIR/embed_reflection.S -c -o $WORKING_DIR/reflect.o


$PACXX/clang++ \
    $ARGS \
    $PACXX_FLAGS \
    $PACXX_HOST_FLAGS \
    $PACXX_RT \
    $PACXX_INCLUDES \
    $USER_FILES \
    $WORKING_DIR/ir.o \
    $WORKING_DIR/reflect.o \
    $PACXX_LD_FLAGS \
    $PACXX_RT_LIBS \
    `$PACXX/llvm-config --cppflags --cflags --ldflags --libs --system-libs` 

if [ $? -ne 0 ]; then
    echo "Host Code generation failed!"
    clean_up
    exit 6
fi

clean_up

